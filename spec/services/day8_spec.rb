require 'rails_helper'

RSpec.describe Day8 do
  subject(:day) { described_class.new(task_input_fetcher: task_input_fetcher_double) }

  let(:task_input_fetcher_double) { instance_double(TaskInputFetcher) }

  before do
    allow(task_input_fetcher_double).to receive(:call).and_return(example)
  end

  context 'simple' do
    let(:example) do
      '..........
..........
..........
....a.....
..........
.....a....
..........
..........
..........
..........'.split("\n")
    end

    it 'calculates part 1' do
      expect(day.part1).to eq 2
    end
  end

  context 'simple 2' do
    let(:example) do
      '..........
..........
..........
....a.....
........a.
.....a....
..........
..........
..........
..........'.split("\n")
    end

    it 'calculates part 1' do
      expect(day.part1).to eq 4
    end
  end

  context 'simple with A' do
    let(:example) do
      '..........
..........
..........
....a.....
........a.
.....a....
..........
......A...
..........
..........'.split("\n")
    end

    it 'calculates part 1' do
      expect(day.part1).to eq 4
    end
  end

  context 'example 2' do
    let(:example) do
      'T.........
...T......
.T........
..........
..........
..........
..........
..........
..........
..........'.split("\n")
    end

    it 'calculates part 2' do
      expect(day.part2).to eq 9
    end
  end

  context 'example' do
    let(:example) do
      '............
........0...
.....0......
.......0....
....0.......
......A.....
............
............
........A...
.........A..
............
............'.split("\n")
    end

    it 'calculates part 1' do
      expect(day.part1).to eq 14
    end

    it 'calculates part 2' do
      expect(day.part2).to eq 34
    end
  end
end
